# -*- coding: utf-8 -*-
"""yolov5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16AMLZ0tuCN9uOqfrotSYmcl31mx-r6IW
"""

#!pip install opencv-python==4.2.0.34

#!curl https://drive.google.com/uc?export=download&id=1R5T6rIyy3lLwgFXNms8whc-387H0tMQO >  yolo5s.pth

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5
# %cd yolov5

import torch
torch.__version__

!pip install pytorch==1.0.2



!sh weights/download_weights.sh

import torch
model = torch.load("weights/yolov5s.pt", map_location="cpu")['model']
model.eval()
#model.fuse()

print(model)

def convert_to_onnx(net, output_name):
    input = torch.randn(1, 3, 640,640)
    input_names = ['data']
    output_names = ['output']
    net.eval()
    torch.onnx.export(net, input, output_name, verbose=False, input_names=input_names, output_names=output_names, opset_version=11)
convert_to_onnx(model, "yolov5s.onnx")

import sys
print(sys.path)
#sys.path = ["/content/yolov5"]
sys.path = ["."]
import torch
import cv2
print(cv2.__version__)

net = cv2.dnn.readNet("weights/yolov5s.onnx")

import onnx

!pip install onnx

#%cd ..
!python /content/yolov5/models/onnx_export.py

"""Exports a pytorch *.pt model to *.onnx format

Usage:
    import torch
    $ export PYTHONPATH="$PWD" && python models/onnx_export.py --weights ./weights/yolov5s.pt --img 640 --batch 1
"""

#import argparse

#import onnx

from models.common import *

def main():
    weights = 'weights/yolov5s.pt'
    img_size = (640, 640)
    batch_size = 1
    # Parameters
    f = weights.replace('.pt', '.onnx')  # onnx filename
    img = torch.zeros((batch_size, 3, img_size[0], img_size[1]))  # image size, (1, 3, 320, 192) iDetection

    # Load pytorch model
    google_utils.attempt_download(weights)
    model = torch.load(weights, map_location=torch.device('cpu'))['model']
    model.eval()
    model.fuse()

    # Export to onnx
    model.model[-1].export = True  # set Detect() layer export=True
    _ = model(img)  # dry run
    torch.onnx.export(model, img, f, verbose=False, opset_version=11, input_names=['images'],
                      output_names=['output'])  # output_names=['classes', 'boxes']

    # Check onnx model
    #model = onnx.load(f)  # load onnx model
    #onnx.checker.check_model(model)  # check onnx model
    #print(onnx.helper.printable_graph(model.graph))  # print a human readable representation of the graph
    #print('Export complete. ONNX model saved to %s\nView with https://github.com/lutzroeder/netron' % f)

main()

!tar -czf yolo5.tgz weights/yolov5s.onnx

!ls -l

# locally built master w CUDA support
!cp "/content/drive/My Drive/cv2_cuda/cv2.cpython-36m-x86_64-linux-gnu.so" .

import cv2
cv2.__version__