# -*- coding: utf-8 -*-
"""FCRN-depth.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pj_g6zltYU60_9vp9t4WpCjudYuMGTdz
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/iro-cp/FCRN-DepthPrediction
# %cd FCRN-DepthPrediction/tensorflow
!ls -l

!wget http://campar.in.tum.de/files/rupprecht/depthpred/NYU_ResNet-UpProj.npy

!wget http://campar.in.tum.de/files/rupprecht/depthpred/NYU_FCRN-checkpoint.zip
!unzip NYU_FCRN-checkpoint.zip
!ls -l

from google.colab import files

uploaded = files.upload()

import argparse
import os
import numpy as np
import tensorflow as tf
from matplotlib import pyplot as plt
from PIL import Image

from tensorflow.python.framework import graph_util
from tensorflow.python.tools import freeze_graph
from tensorflow.python.tools import optimize_for_inference_lib
from tensorflow.tools.graph_transforms import TransformGraph

import models

def predict(model_data_path, image_path):
    tf.reset_default_graph()

  
    
    # Default input size
    height = 228
    width = 304
    channels = 3
    batch_size = 1
   
    # Read image
    img = Image.open(image_path)
    img = img.resize([width,height], Image.ANTIALIAS)
    img = np.array(img).astype('float32')
    img = np.expand_dims(np.asarray(img), axis = 0)
   
    # Create a placeholder for the input image
    input_node = tf.placeholder(tf.float32, shape=(None, height, width, channels))

    # Construct the network
    net = models.ResNet50UpProj({'data': input_node}, batch_size, 1, False)
        
    with tf.Session() as sess:

        # Load the converted parameters
        print('Loading the model')

        # Use to load from ckpt file
        saver = tf.train.Saver()     
        saver.restore(sess, model_data_path)

        # Use to load from npy file
        #net.load(model_data_path, sess) 

        # Evalute the network for the given image
        pred = sess.run(net.get_output(), feed_dict={input_node: img})
        
        # Plot result
        fig = plt.figure()
        ii = plt.imshow(pred[0,:,:,0], interpolation='nearest')
        fig.colorbar(ii)
        plt.show()

        in_graph = sess.graph.as_graph_def()
        tf.train.write_graph(in_graph, '.', 'fcrn.pb',as_text=False)

        oname = net.get_output().name
        print("oname",oname)
        output_nodes_names=["ConvPred/ConvPred"]
        output_graph_def = graph_util.convert_variables_to_constants(
            sess, # The session
            sess.graph.as_graph_def(), # input_graph_def is useful for retrieving the nodes 
            output_nodes_names  
        )
        # output_graph_def.save("export/frozen2.pb")
        output_graph_name="frozen.pb"
        with tf.gfile.GFile(output_graph_name, "wb") as f:
            f.write(output_graph_def.SerializeToString())


        inp_node = ['Placeholder']
        optimize_graph_def = optimize_for_inference_lib.optimize_for_inference(output_graph_def, inp_node, output_nodes_names,
                                                                tf.float32.as_datatype_enum)
        #optimize_graph_def = TransformGraph(optimize_graph_def, inp_node, output_nodes_names, ["sort_by_execution_order"])
        output_graph_name="optimize.pb"
        with tf.gfile.GFile(output_graph_name, "wb") as f:
            f.write(optimize_graph_def.SerializeToString())


        return pred
        
                
# Predict the image
pred = predict("NYU_FCRN.ckpt", "00A9E4A0CC211F300F54C62EC35348B5BD80B34E.png")
!ls -l

import cv2
net = cv2.dnn.readNet("optimize.pb")