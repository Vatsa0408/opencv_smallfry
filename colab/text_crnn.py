# -*- coding: utf-8 -*-
"""text.crnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v1WnpseX1zX5OgEJshxbP4-dvmhbSRIb
"""

!pip install opencv-python==4.2.0.32

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/meijieru/crnn.pytorch
# %cd crnn.pytorch
!wget "https://www.dropbox.com/s/dboqjk20qjkpta3/crnn.pth?dl=0" -O crnn.pth

import torch
import models.crnn as crnn

model = crnn.CRNN(32, 1, 37, 256)
#if torch.cuda.is_available():
#    model = model.cuda()
model.load_state_dict(torch.load("crnn.pth"))

"""
# Loading the input PyTorch model and mapping the tensors to CPU
device = torch.device('cpu')
model = torch.load('crnn.pth', map_location=device)
""" 

# Generate a dummy input that is consistent with the network's architecture
dummy_input = torch.randn(1, 1, 32, 100)
 
# Export into an ONNX model using the PyTorch model and the dummy input
torch.onnx.export(model, dummy_input, "crnn.onnx")

import cv2
net=cv2.dnn.readNet("crnn.onnx")