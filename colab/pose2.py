# -*- coding: utf-8 -*-
"""pose2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16uSu5llalXlCn4D27U7r6l-WHIt1glVf
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/murdockhou/lightweight_openpose
# %cd lightweight_openpose
!ls -l

import tensorflow as tf
from tensorflow.python.framework import graph_util
from tensorflow.python.tools import freeze_graph
from tensorflow.python.tools import optimize_for_inference_lib
from tensorflow.tools.graph_transforms import TransformGraph

import os
import time
import cv2
import numpy as np
from google.colab.patches import cv2_imshow

import sys
sys.path.append('../')
from src.lightweight_openpose import lightweight_openpose
from src.pose_decode import decode_pose
# from src.pose_decode_old import decode_pose
params = {}
params['test_model'] = 'model/model.ckpt-61236'
# params['video_path'] = '/media/hsw/E/video/bank/jiachaojian.mp4'
params['img_path']   = 'person.png'
# params['img_path']   = '/media/ulsee/E/yuncong/yuncong_data/our/test/0/'

params['thre1'] = 0.1
params['thre2'] = 0.0


def save(sess):
    print(tf.all_variables())
    input_graph_def = sess.graph.as_graph_def()

    #for op in input_graph_def.node:
    #     print(op.name)

    output_nodes_names=["init_26"]
    output_graph_def = graph_util.convert_variables_to_constants(
            sess, # The session
            input_graph_def, # input_graph_def is useful for retrieving the nodes 
            output_nodes_names  
    )

    output_graph_name="freeze.pb"
    with tf.gfile.GFile(output_graph_name, "wb") as f:
        f.write(output_graph_def.SerializeToString())

    inp_node = ['Placeholder']
    optimize_graph_def = optimize_for_inference_lib.optimize_for_inference(output_graph_def, [], output_nodes_names,
                                                               tf.float32.as_datatype_enum)
    print("!")
    optimize_graph_def = TransformGraph(optimize_graph_def, inp_node, output_nodes_names, ["sort_by_execution_order"])

    output_graph_name="optimize.pb"
    with tf.gfile.GFile(output_graph_name, "wb") as f:
        f.write(optimize_graph_def.SerializeToString())
    #tf.train.write_graph(optimize_graph_def, ".", 'optimize.pbtxt', as_text=True)


def main():

    use_gpu = False

    if use_gpu:
        os.environ['CUDA_VISIBLE_DEVICES'] = '0'
    else:
        os.environ['CUDA_VISIBLE_DEVICES'] = '-1'

    input_img = tf.placeholder(tf.float32, shape=[1, None, None, 3])

    # _1, _2, cpm, paf = light_openpose(input_img, is_training=False)
    cpm, paf = lightweight_openpose(input_img, num_pafs=26, num_joints=14, is_training=False)
    saver = tf.train.Saver()

    total_img = 0
    total_time = 0
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        saver.restore(sess, params['test_model'])
        print('#---------Successfully loaded trained model.---------#')
        save(sess)
        if params['img_path'] is not None:
            img_ori = cv2.imread(params['img_path'])
            print(np.shape(img_ori))
            img_data = cv2.cvtColor(img_ori, code=cv2.COLOR_BGR2RGB)
            img_data = cv2.resize(img_data, (256, 256))
            img = img_data / 255.

            start_time = time.time()
            heatmap, _paf = sess.run([cpm, paf], feed_dict={input_img: [img]})
            end_time = time.time()
            print(heatmap.shape)
            print(_paf.shape)
            canvas, joint_list, person_to_joint_assoc, joints = decode_pose(img_data, params, heatmap[0], _paf[0])
            decode_time = time.time()
            print('inference + decode time == {}'.format(decode_time - start_time))

            total_img += 1
            total_time += (end_time - start_time)
            canvas = cv2.cvtColor(canvas, cv2.COLOR_BGR2RGB)
            cv2_imshow(canvas)
        else:
            print('Nothing to process.')
main()

!wget 'https://github.com/opencv/opencv_extra/raw/master/testdata/dnn/pose.png' -O person.png

!ls -l

!cat lightweight_openpose.prototxt

import cv2, numpy as np

net = cv2.dnn.readNet("freeze.pb")